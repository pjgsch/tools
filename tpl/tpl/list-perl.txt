#**********************************************************************
#!/usr/bin/perl -w
#======================================================================
# vt.pl         : calculates running velocities
use POSIX;

$dis=100 ;          # insert the distance in meter
$tim="10.0" ;       # insert the time h.m.s.ds

@timm=split('\.',$tim);
$n = scalar(@timm);
if ($n-4>=0) {$hrs = strtod($timm[$n-4])} else {$hrs=0};
if ($n-3>=0) {$min = strtod($timm[$n-3])} else {$min=0};
if ($n-2>=0) {$sec = strtod($timm[$n-2])} else {$sec=0};
if ($n-1>=0) {$psc = strtod($timm[$n-1])} else {$psc=0};

$tsec = $hrs*3600 + $min*60 + $sec + $psc/100;
$vel1 = $dis/$tsec;
$vel2 = $vel1/1000*3600;
$hmt1 = 21097/$vel1;
$hmth = $hmt1/3600;

print "$n, $hrs, $min, $sec, $psc, $tsec, $vel1\n";
printf "tijd = %5.2f, snlh = %5.2f, hmt1 = %7.2f, hmth = %5.2f\n",
$tim,$vel2,$hmt1,$hmth;

#**********************************************************************
#======================================================================
# print a line of 70 '=' to the screen
#
sub pln {
  my $i;
  for ($i=1;$i<=70;$i++) {print "=";}
  print "\n";
}
#======================================================================
#**********************************************************************
#!/usr/bin/perl -w
use POSIX;

# Arguments can be given. They are stored in the array ARGV.
$case = $ARGV[0];

# Open a file for reading, read each line into an array (@) and close it.
$inpfile = "fileinp";
open(IN,"$inpfile"); @lines = <IN>; close(IN);

# Open a file for writing, write something and close it.
$expfile = "fileexp";
open(OUT,">$expfile");
print OUT "This is a line of text.\n";
close OUT;

# Get each line (string variable ($)) from the input array (@)
# and cut of the trailing EOL.
foreach $line (@lines) chomp($line);

# Numbers can be printed in a C-format.
$number = 13.13;
printf "number = %5.2f \n", $number;

# A string can be decomposed inelement, separated by a separator.
$string  = 'one|two|three|four|five';
@words   = split('|',$string);
$word1   = @words[0];
print "$string \n";
print "@words \n";
print "$word1 \n";

#**********************************************************************
#!/usr/bin/perl -w
# dir.pl
# This perl script makes a HTML file 'dirlist.html' with links to
# files and subdirectories in the directory where the script is 
# executed.

# The output of 'pwd' is stored in '$thisdir'.
$thisdir = `pwd`;

# The output od the command 'ls -F' is stored in variable '$dirlist'.
# Each element (file or directory) from '$dirlist' is stored in an array.
$dirlist = `ls -F`;
@lines = split(" ",$dirlist);

# The output file is opened.
$outputfile = "dirlist.html";
open(OUT,">$outputfile");

# Some lines are written to the output file.
print OUT "<HTML><HEAD><TITLE>list</TITLE></HEAD>\n";
print OUT "<BODY bgcolor=\"\#FFFFFF\" link=\"blue\" vlink=\"blue\" alink=\"red\">\n";
print OUT "\n";
print OUT "<HR size=\"5\"><P>\n";
print OUT "\n";
print OUT "$thisdir \n";
print OUT "<UL>\n";

# Each entry in the array '@lines' is selected and processed.
foreach $line (@lines) {
  if ($line eq $outputfile) {$line = "..";}  # this is one back
  chomp($line);                             # not really needed here
  @chrs = split("",$line);                  # characters are isolated
  if ($chrs[-1] eq "/") {                   # the last character is checked
  print OUT "<LI><A href=\"$line\">$line</A>\n";
  }
  else {
  print OUT "<LI><A href=\"$line\">$line</A>\n";
  }
}

# Some final lnes are added.
print OUT "</UL>\n";
print OUT "\n";
print OUT "<HR size=\"5\"><P>\n";
print OUT "</BODY></HTML>\n";

# The output file is closed.
close OUT;
#**********************************************************************
