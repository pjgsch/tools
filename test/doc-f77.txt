**********************************************************************
* <inf> Fortran 77 : examples
**********************************************************************
general
arguments
arithmetic operators
arrays
character
conditional statement
constants
declarations
define
definition
file
formatted
fscanf             scanf , sscanf
functions
include
initialization
input
logical operators
loops
main
output
program structure
relational operators
string
structures
variables
----------------------------------------------------------------------
demo-programs 
links
**********************************************************************
general

There are no reserved words in Fortran 77 .
There is no difference between lowercase and UPPERCASE.
Spaces can be used freely, including in identifiers.
Identifiers : max 6 characters, starting with a alphabetic ch.
Identifiers refer to memory location or program module.
Every statement on a new line.

line-layout :

 1      C or *         comment
 1      $              compiler control line
 1-5    0 t/m 99999    label
 6      teken          following line (max 19)
 7-72                  statements
 73-80                 line identification

**********************************************************************
program structure

      PROGRAM          optional; default MAIN
      declarations :
        specification statements
        type statements
      initialization statements
      executable statements
      (STOP 'text'     ends execution and print 'text')
      END              must always be there
      declarations of subroutines and functions

----------------------------------------------------------------------
arguments

      PROGRAM MAIN
      INTEGER        ARGCNT
      CHARACTER*100  ARGSTR

      ARGCNT = IARGC()              = number of arguments excl. progname
      CALL GETARG (ARGCNT, ARGSTR)  : ARGSTR = argument nr. ARGCNT
      END

call : MAIN arg1 arg2 ....

**********************************************************************
specification statements

      IMPLICIT LOGICAL (L)
     +         CHARACTER (A-C,E-H)
     +         DOUBLE PRECISION (D)
      IMPLICIT REAL*8 (a-h,o-z)
      IMPLICIT NONE
      COMMON
      SAVE

save all local variables or specified variables
preceding executable statements

      DIMENSION               for arrays
      EXTERNAL
      INTRINSIC

**********************************************************************
type statements
----------------------------------------------------------------------
variables

      INTEGER          I,J,N
      REAL             A,B
      DOUBLE PRECISION AA
      COMPLEX          
      CHARACTER        C1,C2
      CHARACTER        WRD*20, LINE*80       strings = WRD(20)
      CHARACTER*20     W1, W2*30             strings = W1(20), W2(30)
      LOGICAL          ERROR

----------------------------------------------------------------------
arrays

first index varies first
not more than 7 indices allowed

      INTEGER       A(20), B(1:20), C(-5:5)     starting A(1) and B(1)
      INTEGER       A(5,5), B(5,-5:5)
      REAL          V1(50), V2(100), V3(100, V4(200)
      REAL          MAT(11,100)
      REAL          K
      DIMENSION     K(0:3,4,5)
      CHARACTER     LINE(80)*1
      CHARACTER     WORD(2,5)*20
      CHARACTER*20  WORD(2,5)         identical but cannot be mixed

      CHARACTER     WORD*80 ?=? WORD(80)*1 ?=? WORD(80)

**********************************************************************
initialization
----------------------------------------------------------------------
DATA statement
 
Between specification and executable statements.
Values may be changed later.
Expressions are NOT allowed.

      DATA I /0/ , A,B /0,0/ , X,Y,Z /3*0.0/ , LOGI /.TRUE./
      INTEGER NUMBER(5), MATRIX(10,20)
      DATA NUMBER,MATRIX /5*0,200*0/

----------------------------------------------------------------------
PARAMETER statement

Parameters are constants.
Values may and can NOT be changed later.
Expressions (only add, subtr, mult, divi and integer exp) are allowed.

      REAL PI
      INTEGER NMAX
      PARAMETER (PI = 3.14159, NMAX = 100)
      INTEGER AMAX
      PARAMETER (AMAX = 3*NMAX,
     +           TITLE = 'Fortran 77')

      REAL ARR(3:NMAX)

**********************************************************************
COMMON statement ; memory management
 
blank/unnamed COMMON-block :
- number           : max 1 per program mudule
- initialisation   : not possible with BLOCK DATA 
- definition items : always 

named COMMON-block :
- number           : more than 1 per program mudule
- length           : blocks with same name must have same length
- initialisation   : with BLOCK DATA subprogram
- definition items : only in program module with COMMON-block or 
                     using SAVE

mind correct sequence and types of items
CHARACTER always in separate COMMON-block

      COMMON identlist
      COMMON // identlist
      COMMON /name1/identlist1,
     +       /name2/identlist2
 
      PROGRAM COMVB
      INTEGER   I, II(20)
      REAL      A, AA(10), X, Y, Z
      CHARACTER CC*25

      COMMON X,Y,Z
      COMMON /COM1/ I,AA, /COM2/ A,II
      COMMON /CHAR/ CC

      .....
      CALL SUB
      .....
      END

      SUBROUTINE SUB
      INTEGER   J
      REAL      MAT(10)
      COMMON /COM1/ J,MAT
      .....
      END

======================================================================
BLOCK DATA subprogramma

      BLOCK DATA
        INTEGER A(10),B(30),MIN(2)
        COMMON /COM1/ A,B,MIN
        DATA A,B / 40*0 /
      END

**********************************************************************
assignment statements

integer                10, +5, -0
real                   3.1415, -130, 2.E3, 0.0031
double precision       3.1D-3             no double pressision allowed
complex                (123,456), (0,1E2)
character              'abc', ' a b c ', '12345'
character              'That''s' -> That's
logical                .TRUE. , .FALSE.

----------------------------------------------------------------------
conversion

be careful with mixed mode arithmetic

real = REAL ( integer )

truncation takes place :
- across an = sign when a real is assigned to an integer
- in integer division

**********************************************************************
arithmetic operators

** , * , / , + , - , //

3/5 -> 0 ; 3./5 -> 0.6 ; 2*2/3 -> 1 ; 2*(2/3) -> 1
'ab'//'cd' -> 'abcd'
'abc'(2:3) -> 'bc' ; 'abcde'(3:) -> 'cde'

LINE2(1) = 'comp'
LINE2(2) = 'lete'
WORD     = LINE2(1)//LINE2(2)     ->  'complete'

----------------------------------------------------------------------
operator hierarchy

- expressions within brackets
- exponentiation : from right to left
- multiplication/division : from left to right
- addition/subtraction : from left to right
- relational logical (.GT..GE..LT..LE..EQ..NE.)
- .AND.
- .OR. and .NOT.

----------------------------------------------------------------------
relational operators
 
.LT. .LE. .EQ. .NE. .GT. .GE.

----------------------------------------------------------------------
logical operators

.NOT. , .AND. , .OR. , .EQV. , .NEQV.

**********************************************************************
GOTO statement (unconditional)

      GOTO label

**********************************************************************
conditional statement

      IF ( ) statement
      IF ( ) THEN
        statements
      END IF
      IF ( ) THEN
        statements
      ELSE IF ( ) THEN
        statements
      ELSE
        statements
      END IF

      IF (I .EQ. 0) A = 3.14
      IF (I .GT. 0) THEN
        A = 3.14
      ELSE
        A = 0
      END IF
      IF (I .GE. 0) THEN
        V1(I+1) = 0
        V2(I+1) = 0
      ENDIF
      IF (I .GT. 0 .AND. J .EQ. 0) A = 0
      IF (I .LT. 0 .OR. J .NEQ. 0) A = 1
      S = 'beer'
      IF (S .EQ. 'wine') ....
      shortest string will be appended to the right with spaces


**********************************************************************
loops

counter cannot be changed
counter is not specified after DO-loop 
counter can be : integer, real, double precision
break with GOTO; then counter is specified
do not jump into a DO-loop or its end label
nested DO-loops may have the same end label

      DO e(nd)l(abel) counter = begin, end, step
        statements
   n  CONTINUE

      DO e(nd)l(abel) counter = begin, end, step
        statements
      ENDDO

      DO 10 I=1,100,1
        SUM = SUM + 1
   10 CONTINUE

      DO 10 ICOL=1,NCOL
      DO 10 IROW=1,NROW
        MATRIX(IROW,ICOL) = ICOL
   10 CONTINUE

    n IF (condition) THEN
        statements
        GOTO n
      ENDIF

    n CONTINUE
      IF (condition) THEN
        statements
        GOTO n
      ENDIF

***********************************************************************
file operations
      
      OPEN ([UNIT  =] unit specifier 
                      (0 t/m 99
                       * : standard input  = 5
                       * : standard output = 6 )
     *      [FILE  =] 'filename'|character array
     *      IOSTAT =  integer variable  ( 0 -> no error )
     *      STATUS =  'UNKNOWN'(def)|'OLD'|'SCRATCH'|'NEW'|'DELETE'
     *      ACCESS =  'SEQUENTIAL'(def)|'DIRECT'
     *      FORM   =  'FORMATTED'(def)|'UNFORMATTED'|'BUFFERED'
     *      RECL   =  integer record length (only with ACCESS='DIRECT')
                      ( length in chars for FORMATTED,
                        length in words for UNFORMATTED )
     *      BLANK  =  'NULL'(def)|'ZERO' (conversion of spaces)
     *      ERR    =  statement label  )

Specified elements may be placed in random order.

      (LOGICAL LEXLST)
      INQUIRE (FILE='filename', EXIST=LEXLST, FORM=FORMAT)
      (LEXLST = .TRUE. if 'filename' exists)

      CLOSE(UNIT=1,STATUS='KEEP'(def)|'DELETE')
      ENDFILE(UNIT=1)
      BACKSPACE(UNIT=1)
      REWIND(UNIT=1)

      OPEN(UNIT=1, FILE='test.dat', IOSTAT=IOS)
      IF (IOS .NE. 0) PRINT *, 'open-error : ', IOS

      integer n
      character filename*50, andnot(50)*1
      read *, filename
      open (1, file = filename, iostat = n)

**********************************************************************
I/O

      READ  (control-list), I/O-list                          
      PRINT (control-list), I/O-list
      WRITE (control-list), I/O-list


control-list :  [UNIT  =] unit specifier (integer expr. of *),
                [FMT   =] format (*|format label|'(format spec)'),
                IOSTAT =  integer variable (error code),       
                ERR    =  label  (= goto label if error),    
                END    =  label (= goto label if file ends)  
                REC    =  record number (only with ACCESS='DIRECT').

I/O-list        :  variables/expressions
implied DO-loop :  (I/O-list-item, index = begin,end,step)

free-format (list directed) I/O
- positions  : not fixed 
- separation : komma or space(s)
- conversion : value type must equal item type
- repeat     : number of items in I/O-list ; end input with /
- quotes     : needed for characters and strings

formatted I/O
- positions  : fixed
- separation : not needed
- conversion : conform I/O-list
- repeat     : with rFw.d 
- quotes     : not needed for characters and strings

frmlbl FORMAT (format specification)

              rIw              r : repeat factor
              rIw,m            w : max width
              rFw.d            m : max # numbers
              rEw.d            d : # decimal numbers
              rEw.dEe          e : # exponential numbers  w>=d+e+5
              rDw.d            I : integer
              rGw.d            F : float  w>=d+3  
              rLw              E : exponential  w>=d+7
              rA[w]            D : double   
              r( )             L : logical  
                               G : F or E
                               A : character

              nX, TRn          n spaces forward (n=1 NOT default)
              TLn              n spaces back
              Tn               to position n
              BN, BZ           blank to null, blank to zero
              /                new line

              sturingstekens : eerste teken in geformateerde output
              spatie           enkele regelopvoer
              0                dubbele regelopvoer
              1                nieuwe pagina/scherm
              +                geen regelopvoer

              I/O-list

Each time the format is exhausted, we start again on a new line.
The last open bracket determines the position at which the format
is repeated.

======================================================================

      READ  *                 , I/O-list (only variables)
      READ  frmlbl            , I/O-list
      READ  '( format spec )' , I/O-list

      READ (*, *, END = 10) I/O-list
10    STOP 'end-of-file

      PRINT *                 , I/O-list 
      PRINT frmlbl            , I/O-list
      PRINT '( format spec )' , I/O-list

======================================================================

      READ *           , IA,IB
      READ (*, *)        IA,IB
      READ (*, '(2I4)')  IA,IB
      READ (5, *)        IA,IB
      READ (1, '(2I4)')  IA,IB
      READ (1, 10)       IA,IB
 10   FORMAT ('(2I4)')

      READ *, (A(I),I=1,5)            ==  READ *,A  with  A(5)
      READ *, ((B(I,J),J=1,5),I=1,3)  ==  READ *, B  with  B(3,5)

In format description :
- BZ -> blanks become zeros
- BN -> blanks become null

======================================================================

      PRINT *  , 'this is some text'
      PRINT 10
 10   FORMAT ('this is some text')

      PRINT *  , 'sum of ', IA, 'and ', IB, ' = ', IA+IB
      PRINT *, ((I,B(I,J),J=1,5),I=1,3)
      PRINT *, (I,B,I=1,3)      
      PRINT '(1X,I3,''.'',1X,A,3X,I2,F8.2)'
     +      I,NAME(I),AGE(I),GEM(I),I=1,NPERS
     
      WRITE (*, '(3I5)') 'result = ', IA,IB,IA+IB
      WRITE (1, '(3I5)') 'result = ', IA,IB,IA+IB

      WRITE (*, 555 ) IA,IB,IA+IB
 555  FORMAT ( 'result = ' 3I5 )

      CHARACTER LINE(256)*1
      READ ( *, '(256A)', END = 10 ) ( LINE(I), I=1,MAXLEN )
   10 CONTINUE
      WRITE ( *, '(256A)' ) ( LINE(I), I=1,LINLEN )

      CHARACTER LINE*256
      READ ( *, '(A256)', END = 10 ) LINE
   10 CONTINUE
      WRITE ( *, '(256A)' ) ( LINE(I:I), I=1,LINLEN )

      WRITE(UNIT=1,FMT=100) A,B,C,D
  100 FORMAT(1X,4(F6.1:,','))

The : prevents the comma (',') after the last number (D)

You may have formats which are more extensive than the lists which
reference them.

We can generate values from within a WRITE statement

      WRITE(UNIT=1,FMT=101)(I,I=0,9)
  101 FORMAT(1X,10I3)

special characters for a line printer : in column 1
-  blank -> nothing special
-  0 -> leave an extra line
-  1 -> skip down to the top of the next page
-  + -> no line advance

      PRINT 101,A,B
  101 FORMAT(1X,F10.4/1x,F10.4)

The / generates a new line


      write(unit=..,fmt='(E9.2,2X)') ..



**********************************************************************
system calls

      ix = system ( 'date' )
      iy = system ( 'ls -l & )

**********************************************************************
subroutines and functions

SUBROUTINE subrname
SUBROUTINE subrname(dummy argument list)
CALL subrname(actual argument list)
[TYPE] FUNCTION funcname()
[TYPE] FUNCTION funcname(dummy argument list)

dummy and actual arguments must have the same type
arguments are interchanged 'by reference' : memory adress link
no recursion possible

======================================================================
statement function ; define

specification in calling program module 
between specification and executable statements
do not close with END

      INTEGER PLUS
      REAL C
      PLUS(IA,IB) = IA + IB
      C(A,B) = SQRT(A*A + B*B)
      PRINT *, PLUS(I,J)
      Z = C(X,Y)

----------------------------------------------------------------------

      PROGRAM MAIN

      REAL A,B,C
      READ *,A,B
      CALL SUB(A,B,C)
      PRINT *,C

      END
     
      SUBROUTINE SUB(X,Y,Z)
        REAL X,Y,Z,FUN
        Z = FUN(X,Y)
        [RETURN]
      END
 
      REAL FUNCTION FUN(X,Y)
        REAL X,Y
        FUN = X+Y
        [RETURN]
      END

----------------------------------------------------------------------

      PROGRAM MAIN

      CHARACTER WRD*10, W*20
      .....
      
      PRINT *, WRD(I), W{I}

      END

      CHARACTER*(*) FUNCTION WRD(NR)
        INTEGER NR
        .....
      END

      INTEGER FUNCTION FUN(W)
        CHARACTER W*(*)
        .....
      END

======================================================================
character/string functions

      ASCIIA = CHAR(65)
      ASCIIN = ICHAR('a')
      LGE(S1,S2)               true als S1>=S2
      LGT(S1,S2)               true als S1>S2
      LLE(S1,S2)               true als S1<=S2
      LLT(S1,S2)               true als S1<S2
      LEN(S1)                  length of S1
      POS=INDEX('PIET','ET')   = 3

======================================================================
some intrinsic functions 

      int(x)    real(i)    dble(x)   cmplx(x) : type-conv
      char(i)   ichar(s)   : type-conv
      aint(x)   :  afkapping (no type-conv)
      anint(x)  :  afronding (no type-conv)
      nint(x)   :  afronding (type-conv to integer)
      abs(x)    iabs(i)    dabs(d)   cabs(c)  
      sqrt(x)   dsqrt(d)   csgrt(c)
      log(x)    alog(i)    dlog(d)   clog(c)
      log10(x)  alog10(i)  dlog10(d)
      exp(x)    dexp(d)    cexp(d)
      sin(x)    cos(x)     tan(x)  
      asin(x)   acos(x)    atan(x)   atan2(y,x) = atan(y/x)
      max(k,l)  min(k.l)
      mod(k,l)    
      sign(x)   isign(i)  dsign(d)

======================================================================
speed

operation                       relative speed      example

integer assignment              1                   i = 10
integer addition/subtraction    1.5                 i + j
real assignment                 2                   a = 10.0
real addition/subtraction       3                   a + b
real multiply                   5                   a * b
integer to real                 6                   a = i
integer multiply                8                   i * j
division                        9                   i/j, a/b
exponentiation to integer       35                  i**j
exponentiation to real          115                 a**b. i**b

**********************************************************************

demo programs

**********************************************************************

      PROGRAM IO

      IMPLICIT NONE

      INTEGER I
      REAL RA,RSUM

      DATA RSUM /0.0/

      PRINT *, 2/3, 2./3 

      I = 0
   10 PRINT *, 'Type next; stop with 0'
      READ *, RA
      IF (RA .EQ. 0.0) GOTO 20
      I = I + 1
      RSUM = RSUM + RA
      PRINT *, I, RA, RSUM
      PRINT '(I3,3X,F5.2,5X,E12.5)', I, RA, RSUM
      GOTO 10
   20 CONTINUE

      END

======================================================================

      PROGRAM STRING

      IMPLICIT NONE

      INTEGER LENNAAM
      CHARACTER NAAM*8, NAMEXT*15

      PRINT *, 'Give a name between quotes without extension'
      READ *, NAAM
      PRINT *, NAAM
      NAMEXT = NAAM//'1'//'.inp'
      PRINT *, NAMEXT
      LENNAAM = INDEX(NAAM,' ') - 1
      NAMEXT = NAAM(1:LENNAAM)//'1'//'.inp'
      PRINT *, NAMEXT

      END

======================================================================

      PROGRAM BEWERK

      IMPLICIT NONE

      INTEGER I
      INTEGER MATRIX(5,4)

      DATA MATRIX / 11,21,31,41,
     +              12,22,32,42,
     +              13,23,33,43,
     +              14,24,34,44,
     +              15,25,35,45 /

      CALL PRINT1 (MATRIX,5,4)                
      CALL PRINT1 (MATRIX,5,2)
      CALL PRINT1 (MATRIX,3,4)

      END

      SUBROUTINE PRINT1 (MATRIX,DIM1,DIM2)
        INTEGER DIM1,DIM2,MATRIX(DIM1,DIM2),I,J
        PRINT '(3X,(10I3))', (I,I=1,DIM1)
        DO 10 J=1,DIM2
        PRINT '(10I3)',J,(MATRIX(I,J),I=1,DIM1)
   10   CONTINUE
      END

      SUBROUTINE PRINT2 (MATRIX,ORIG1,DIM1,DIM2)
        INTEGER ORIG1,DIM1,DIM2,MATRIX(ORIG1,DIM2),I,J
        PRINT '(3X,(10I3))',(I,I=1,DIM1)
        DO 10 J=1,DIM2
        PRINT '(10I3)',J,(MATRIX(I,J),I=1,DIM1)
   10   CONTINUE
      END

======================================================================

      PROGRAM ARGUM
        INTEGER I,J,K
        DATA I,J,K /1,2,3/
        PRINT *, I,J,K         -> 1 2 3
        CALL SUB(I,J)          -> 10 20 30
        PRINT *, I,J,K         -> 20 10 3
        CALL SUB(3,4)          -> 10 20 30
        PRINT *, 3, 4          -> 20 10
      END
      SUBROUTINE SUB(J,I)
        INTEGER I,J,K
        SAVE I                 -> memory value I saved
        I = 10
        J = 20
        K = 30
        PRINT *, I,J,K
      END

======================================================================

      PROGRAM MAIN
        INTEGER A(100), B(10,20)
        CALL INIT1(A,100)               correct
        CALL INIT1(B,10*20)             correct
        CALL INIT1(B,50)                correct
        CALL INIT1(B,300)               wrong
        CALL INIT2(A,10,10)             correct
        CALL INIT2(B,50,4)              correct
        CALL INIT2(A,50,4)              wrongcomm
      END
      SUBSTRUCTURE INIT1A(ARR,LEN)      adjustable bounds
        INTEGER LEN,ARR(LEN),I
        DO 10 I=1,LEN
   10     ARR(I)=0
      END
      SUBSTRUCTURE INIT1B(ARR,LEN)      assumed bounds
        INTEGER LEN,ARR(*),I            LEN may be omitted 
        DO 10 I=1,LEN
   10     ARR(I)=0
      END
      SUBSTRUCTURE INIT2A(ARR,L1,L2)
        INTEGER L1,L2,ARR(L1,L2),I,J
        DO 10 J=1,L2
        DO 10 I=1.L1
   10     ARR(I,J)=0
      END
      SUBSTRUCTURE INIT2B(ARR,L1)
        INTEGER L1,ARR(L1,*)
        .....
      END

======================================================================
subprogram as argument : external in calling program unit 

      PROGRAM MAIN

      INTEGER A,B,C
      EXTERNAL FU1,FU2
      INTRINSIC MOD
      A = 15
      B = 5
      CALL SUB(A,B,C,FU1)
      PRINT *, A,B,C
      CALL SUB(A,B,C,FU2)
      PRINT *, A,B,C
      CALL SUB(A,B,C,MOD)
      PRINT *, A,B,C

      END

      SUBROUTINE SUB(IA,IB,IC,FUN)
        INTEGER IA,IB,IC,FUN
        IC = FUN(IA,IB)
      END

      INTEGER FUNCTION FU1(I1,I2)
        INTEGER I1,I2
        FU1 = I1 + I2
      END

      INTEGER FUNCTION FU2(I1,I2)
        INTEGER I1,I2
        FU2 = I1 - I2
      END

======================================================================

      SUBROUTINE STOPPEN 
        INTEGER S
        PRINT *, 'Type 0 to stop'
        READ *, S
        IF (S .EQ. 0) STOP
      END

======================================================================
links

www.kcl.ac.uk/kis/support/cit//fortran/f77book.pdf  : Fortran 77 Book  
www.fortran.com/  : Fortran Company
macams1.bo.infn.it/tutorial/index.html   : Fortran Tutorial 
www.kcl.ac.uk/kis/support/cc/fortran/f90home.htm   : Fortran 90
wwwinfo.cern.ch/asdoc/f90.html  : Fortran 90 Tutorials   
======================================================================

**********************************************************************
